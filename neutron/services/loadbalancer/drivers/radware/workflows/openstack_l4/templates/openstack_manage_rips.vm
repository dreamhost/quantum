
#parse("openstack_l4/openstack_common.vm")

#property("summary", "Manage Real IPs - date: [2013-05-13]")

##I am corrently using the needed function from this file so not to handle the path structure.
##parse("common_lib.vm")

## Manage RIPs

## Layer 4 part
#param("groupId", "int", "in", "prompt=Group ID")
#param("curRealServerIds", "int[]", "in", "prompt=Current Real Server IDs")
#param("memberIps", "ip[]", "in", "prompt=Updated Real Server IPs (0.0.0.0 means no value)")
#param("memberWeights", "int[]", "in", "prompt=Real Server Weights")
#param("memberPorts", "int[]", "in", "prompt=Real Server Ports")
#param("memberAdminStates", "bool[]", "in", "prompt=Real Server Admin States")

#param("realServerIds", "int[]", "out")

## implementation

#set($currRealServers={})
## calculate the current list of servers connected to the group
#foreach ($serverId in $curRealServerIds)
    #if($serverId>0)
        #set($rse = $adc.newBean("/c/slb/real"))
        #set($rse.Index = $serverId)
        #set($rse2 = $adc.read($rse))
        #if ($adc.isNull($rse2))
            #error ("Server $serverId was not found")
        #end
        #set($key="#generate_key($rse2)")
        #set($key=$key.trim())
        #set($addStatus=$currRealServers.put($key, $serverId))
    #end
#end

#set($newRealServers={})
#set($memberIndex=0)
## calculate the new list of servers connected to the group
#foreach ($memberIp in $memberIps)
    #if($memberIp!=$NO_IP)
        #set($memberPort=$memberPorts[$memberIndex])
        #set($key="#generate_key2($memberIp, $memberPort)")
        #set($key=$key.trim())
        #set($addStatus=$newRealServers.put($key, $memberIndex))
    #end
    #set($memberIndex=$memberIndex+1)
#end

#set($toUpdateRealServers={})
#set($addStatus=$toUpdateRealServers.putAll($currRealServers))
#set($addStatus=$toUpdateRealServers.keySet().retainAll($newRealServers.keySet()))
#log("Real servers to be updated: $toUpdateRealServers")
#foreach ($entry in $toUpdateRealServers.entrySet())
    #set($updateId=$entry.getValue())
    #set($updateKey=$entry.getKey())
    #set($memberIndex=$newRealServers.get($updateKey))
    #set($memberWeight=$memberWeights[$memberIndex])
    #set($memberAdminState=$memberAdminStates[$memberIndex])

/c/slb/real $updateId
    #print_weight($memberWeight)
    #os_print_bool_to_ena_dis($memberAdminState)

#end

#set($createId=0)
#set($toCreateRealServers={})
#set($addStatus=$toCreateRealServers.putAll($newRealServers))
#set($addStatus=$toCreateRealServers.keySet().removeAll($currRealServers.keySet()))
#log("Real servers to be created: $toCreateRealServers")
#foreach ($entry in $toCreateRealServers.entrySet())
    #set($createId=$adc.getFreeIndex("/c/slb/real", $createId))
    #set($memberIndex=$entry.getValue())
    #set($memberWeight=$memberWeights[$memberIndex])
    #set($memberPort=$memberPorts[$memberIndex])
    #set($memberIp=$memberIps[$memberIndex])
    #set($memberIpVer="#os_get_ip_version($memberIp)")
    #set($memberIpVer=$memberIpVer.trim())
    #set($memberAdminState=$memberAdminStates[$memberIndex])

/c/slb/real $createId
    ipver   $memberIpVer
    rip     $memberIp
    #print_weight($memberWeight)
    addport $memberPort
    #os_print_bool_to_ena_dis($memberAdminState)

/c/slb/group $groupId
    ipver $memberIpVer
    add $createId

#end

#set($toDelRealServers={})
#set($addStatus=$toDelRealServers.putAll($currRealServers))
#set($addStatus=$toDelRealServers.keySet().removeAll($newRealServers.keySet()))
#log("Real servers to be deleted: $toDelRealServers")
#foreach ($delId in $toDelRealServers.values())
/c/slb/group $groupId
    rem $delId

/c/slb/real $delId
    del

#end

#set($realServerIds = [])
#set($group1 = $adc.newBean("/c/slb/group"))
#set($group1.Index = $groupId)
#set($group2 = $adc.read($group1))
#set($realServerIds=$adc.readNumbersFromBitmapPlusOne($group2.RealServers))


#macro(generate_key, $rsBean)
    #set($ret_key="")
    #if ($rsBean.IpVer == "IPV4")
        #set($ret_key=$ret_key+$rsBean.IpAddr)
    #else
        #set($ret_key=$ret_key+$rsBean.Ipv6Addr)
    #end
    #set($rports=[])
    #set($dummy="#get_real_server_rports($rsBean.Index, $rports)")
    #foreach($rport in $rports)
        #set($ret_key=$ret_key+"-"+$rport)
    #end

    $ret_key
#end

#macro(generate_key2, $ip_address, $rport)
    #set($ret_key="")
    #set($ret_key=$ret_key + $ip_address + "-" + $rport)
    $ret_key
#end

#macro(get_real_server_rports, $rs_id, $rports)
    #set($pe = $adc.newBean('SlbNewCfgRealServPortEntry'))
    #set($pe.Index=1)
    #set($pe.RealServIndex= $rs_id)
    #set($pei = $adc.read($pe))
    #if($adc.isNotNull($pei))
        #set($dummy=$rports.add($pei.RealPort))
    #else
        #set($dummy=$rports.add(0))
    #end
#end

#macro(print_weight, $weight)
    #set($weight=1+$weight/5)
    weight  $weight
#end


