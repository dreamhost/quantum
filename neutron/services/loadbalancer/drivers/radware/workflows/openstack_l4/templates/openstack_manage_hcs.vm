
#property("summary", "Manage Health Checks - date: [2013-05-13 4]")

## Manage Health Checks

#parse("openstack_l4/openstack_common.vm")

#param("group_id", "int", "in", "prompt=Group ID")
#param("curr_hm_uuid_array", "string[]", "in", "prompt=Current Health monitors UUID array")
#param("curr_hm_type_array", "string[]", "in", "prompt=Current Health monitors type array")
#param("hm_uuid_array", "string[]", "in", "prompt=Health monitors UUID array")
#param("hm_type_array", "string[]", "in", "prompt=Health monitors type array")
#param("hm_delay_array", "int[]", "in", "prompt=Health monitors delay array")
#param("hm_timeout_array", "int[]", "in", "prompt=Health monitors timeout array")
#param("hm_max_retries_array", "int[]", "in", "prompt=Health monitors max retries array")
#param("hm_admin_state_up_array", "bool[]", "in", "prompt=Health monitors admin state array")
#param("hm_url_path_array", "string[]", "in", "prompt=Health monitors url path array")
#param("hm_http_method_array", "string[]", "in", "prompt=Health monitors http method array")
#param("hm_expected_codes_array", "string[]", "in", "prompt=Health monitor expected codes_array")

#if($hm_uuid_array.size() > $HC_MAX_HCS_PER_GROUP)
    #error("Got $hm_uuid_array.length ammount of health monitors which is more than the supported $HC_MAX_HCS_PER_GROUP health monitors per pool with alteon id $group_id on device $adc")
#end

## -----------------------------------------------------------------------------
## perpare a map of hcs connected to the group with their ref count
## -----------------------------------------------------------------------------
#set($currHCs={})
#set($counter=0)
#foreach ($hcUUID in $curr_hm_uuid_array)
    #if($hcUUID != $NONE)
        #set($hcType=$curr_hm_type_array[$counter])
        #set($refCountRetArray=[-1])
        #os_get_ref_count_for_hc($hcUUID, $hcType, $refCountRetArray)
        ##consider raising error if ref count is 0
        #set($not_in_use=$currHCs.put($hcUUID, $refCountRetArray[0]))
        #set($counter=$counter+1)
    #end
#end

## ----------------------------------------------------
## prepare map of hcs to be connected to the group
## ----------------------------------------------------
#set($newHCs={})
#set($hcrIndex=0)
#foreach ($hcUUID in $hm_uuid_array)
    #if($hcUUID!=$NONE)
        #set($not_in_use=$newHCs.put($hcUUID, $hcrIndex))
    #end
    #set($hcrIndex=$hcrIndex+1)
#end

## ---------------------------------------
## handle the hcs that should be updated
## ---------------------------------------
#set($toUpdateHCs={})
#set($not_in_use=$toUpdateHCs.putAll($currHCs))
#set($not_in_use=$toUpdateHCs.keySet().retainAll($newHCs.keySet()))
#log("Health monitors to be updated: $toUpdateHCs")
#foreach ($entry in $toUpdateHCs.entrySet())
    #set($hcRefCount=$entry.getValue())
    #set($hcUUID=$entry.getKey())
    #set($hcIndex=$newHCs.get($hcUUID))
    #set($hcType=$hm_type_array[$hcIndex])
    #set($hcDelay=$hm_delay_array[$hcIndex])
    #set($hcTimeout=$hm_timeout_array[$hcIndex])
    #set($hcMxRetries=$hm_max_retries_array[$hcIndex])
    #set($hcAdminStateUp=$hm_admin_state_up_array[$hcIndex])
    #set($hcUrlPath=$hm_url_path_array[$hcIndex])
    #set($hcHttpMethod=$hm_http_method_array[$hcIndex])
    #set($hcExpectedCodes=$hm_expected_codes_array[$hcIndex])
    #os_print_hc_config($hcType, $hcUUID,$hcRefCount,$hcMxRetries,$hcDelay, $hcTimeout,$hcUrlPath,$hcExpectedCodes)
#end

## ---------------------------------------
## handle the hcs that should be created
## ---------------------------------------
#set($toCreateHCs={})
#set($not_in_use=$toCreateHCs.putAll($newHCs))
#set($not_in_use=$toCreateHCs.keySet().removeAll($currHCs.keySet()))
#log("Health monitors to be created: $toCreateHCs")
#foreach ($entry in $toCreateHCs.entrySet())
    #set($hcUUID=$entry.getKey())
    #set($hcIndex=$newHCs.get($hcUUID))
    #set($hcType=$hm_type_array[$hcIndex])
    #set($hcDelay=$hm_delay_array[$hcIndex])
    #set($hcTimeout=$hm_timeout_array[$hcIndex])
    #set($hcMxRetries=$hm_max_retries_array[$hcIndex])
    #set($hcAdminStateUp=$hm_admin_state_up_array[$hcIndex])
    #set($hcUrlPath=$hm_url_path_array[$hcIndex])
    #set($hcHttpMethod=$hm_http_method_array[$hcIndex])
    #set($hcExpectedCodes=$hm_expected_codes_array[$hcIndex])

    #set($hcRefCount=1)
    #set($refCountRetArray=[-1])
    ## query the device and check how many references this hc has already
    #os_get_ref_count_for_hc($hcUUID, $hcType, $refCountRetArray)
    #set($hcRefCount=$hcRefCount+$refCountRetArray[0])

    #os_print_hc_config($hcType, $hcUUID,$hcRefCount,$hcMxRetries,$hcDelay, $hcTimeout,$hcUrlPath,$hcExpectedCodes)
#end

## ---------------------------------------
## handle the hcs that should be deleted
## ---------------------------------------
#set($toDelHCs={})
#set($not_in_use=$toDelHCs.putAll($currHCs))
#set($not_in_use=$toDelHCs.keySet().removeAll($newHCs.keySet()))
#log("Health monitors to be deleted: $toDelHCs")
#foreach ($entry in $toDelHCs.entrySet())
    #set($hcUUID=$entry.getKey())
    #set($hcRefCount=$entry.getValue())
    #set($hcRefCount=$hcRefCount - 1)
    #os_print_health_check_header($NONE, $hcUUID)
    ## if we still have positive ref count - keep the hc, else - remove it
    #if($hcRefCount > 0)
        name "$hcRefCount"
    #else
        del
    #end
#end

## ------------------------------
## handle the logexp config block
## ------------------------------
#set($logExp="")
#set($counter=0)
#if($hm_uuid_array.size() > 0)
    #foreach($hcUUID in $hm_uuid_array)
        #if($hm_admin_state_up_array[$counter] && $hcUUID != $NONE)
            #set($stripped_uuid=[-1])
            #os_strip_uuid($hcUUID,$stripped_uuid)
            #set($_log_exp_uuid=$stripped_uuid[0])
            #set($logExp=$logExp + $_log_exp_uuid + "&")
        #end
        #set($counter=$counter+1)
    #end
    #if($logExp.length() > 0)
        #set($len=$logExp.length() - 1)
        #set($logExp=$logExp.substring(0,$len))
    #else
        #set($logExp=$DEFAULT_HEALTH_MONITOR_TYPE)
    #end
#else
    #set($logExp=$DEFAULT_HEALTH_MONITOR_TYPE)
#end

/c/slb/advhc/health HC_Group_$group_id LOGEXP
        logexp $logExp

/c/slb/group $group_id
        health HC_Group_$group_id


